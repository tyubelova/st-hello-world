import streamlit as st
import pandas as pd
import numpy as np
from datetime import date
import matplotlib.pyplot as plt
import plotly.express as px
import graphviz
import time

np.random.seed(42)

def general_information():
    st.markdown(
    """
    # Информация о библиотеке

    Одна из статей на Хабре (https://habr.com/ru/articles/568836/) гласит:

    > Streamlit - библиотека Python с открытым кодом. Она позволяет с легкостью создавать разные красивые веб-приложения для инженеров машинного обучения.

    Я не могу полностью согласиться с этой цитатой. Действительно, Streamlit - это библиотека, которая позволяет создавать интерактивные веб-приложения
    для красивого представления информации в виде кликабельных графиков. Но, на самом деле, применимость библиотеки не ограничивается только графиками
    или заменой Jupyter Notebook для различных отчетов.

    ### Вот малый пример веб-приложений, созданных с использованием библиотеки Streamlit:

    - Вот, например, портфолио некоего Mehul Gupta, которое явно понравится любому HR: https://mehulgupta2016154-resume-builder-streamlit-app-ajmqjx.streamlit.app/
    - Вот в этом приложении можно получить предсказание своего прошлого, настоящего и будущего на картах таро: https://valeriaf22-tarot-reading-app-tarot-reading-app-28u8e3.streamlit.app/
    - А это приложение может выиграть в английской версии игры "5 букв" (той самой, которая помогает получить дополнительный кешбек в Тинькофф банке): https://wordler.streamlit.app/
    
    Кажется, что, если писать доклад дальше внутри одной страницы, то текст получится не таким красивым и читабельным. **Поэтому, пожалуйста, 
    для перехода в следующие части доклада выберите следующий раздел в меню слева. Спасибо!**
    """)

def text():
    st.markdown(
    """
    ### Что библиотека умеет:

    - Как я сказала ранее, Streamlit можно рассматривать в качестве замены Jupyter Notebook. Для этого можно использовать функцию *st.markdown*. Так, код:
    """)
    st.code("st.markown('*Привет, мир!*')")
    st.markdown("""
    Выведет следующее:
    """)
    st.markdown('*Привет, мир!*')
    st.markdown("""
    Банально? Тогда можно записаться на ноготочки, вставив в текст смайлики, используя short-коды из данной шпаргалки: https://streamlit-emoji-shortcodes-streamlit-app-gwckff.streamlit.app/

    Например:
    """)
    nails = """ Девочки!:women-with-bunny-ears-partying: Записываемся:notebook: на ноготочки :nail_care::lipstick:"""
    st.code(f"""st.markdown('''{nails}''')""")
    st.markdown(nails)
    st.markdown("""
    Markdown позволяет писать **жирным шрифтом**, *курсивом*, :green[разными цветами], Латехом:

    $\pi = 3,1415926$

    ## Добавлять заголовки

    > Цитаты 

    - bullet-points 

    Выглядит это следующим образом:
    """)
    st.code("""
    Markdown позволяет писать **жирным шрифтом**, *курсивом*, :green[разными цветами], Латехом:

    $\pi = 3,1415926$

    ## Добавлять заголовки

    > Цитаты 

    - bullet-points 

    Выглядит это следующим образом: 
    """)
    st.markdown("""
    Кроме того, заголовки, заголовки по-меньше и очень маленькие заколовки можно писать так:
    """)
    st.code("""
    st.title('Большой заголовок')
    st.divider() #разделю заголовки между собой
    st.header('Заголовок чуть меньше')
    st.divider()
    st.subheader('Самый маленький заголовок')
    """)
    st.title('Большой заголовок')
    st.divider() #
    st.header('Заголовок чуть меньше')
    st.divider()
    st.subheader('Самый маленький заголовок')
    st.markdown("""
    Из продвинутых фич для работы с текстом самой интересной является "st.text_area", которая позволяет пользователям вводить свой текст в приложении. 
    Так, например, можно создать форму для резюме, которому позавидует даже Мехула из первого абзаца:
    """)
    st.code("""
    your_name = st.text_area('Здесь можно ввести свое имя', "Таня")
    occupation = st.text_area('Здесь можно ввести свое текущее место работы', "Маркетолог")
    personal_information = st.text_area('Здесь можно ввести информацию о себе', "Я люблю свою кошку Тосю, заниматься скалолазанием и гулять по Москве")
    st.markdown(f'Меня зовут {your_name}, Моя профессия - {occupation}. {personal_information}.')
    """)
    your_name = st.text_area('Здесь можно ввести свое имя', "Таня")
    occupation = st.text_area('Здесь можно ввести свое текущее место работы', "Маркетолог")
    personal_information = st.text_area('Здесь можно ввести информацию о себе', "Я люблю свою кошку Тосю, заниматься скалолазанием и гулять по Москве")
    st.markdown(f'**Меня зовут {your_name}. Моя профессия - {occupation}. {personal_information}.**')

def work_w_df():
    st.markdown(
        """
        ### Что библиотека умеет, Part 2 - работа с данными:

        - В данном разделе я бы хотела показать, какие возможности для работы с данными представляет streamlit. 
        Самая главная функция для работы с таблицами и для их отображения - st.dataframe.
        """)
    st.markdown(
        """
        Для начала сгенерируем таблицу 10 на 10 (пусть содержательно она будет показывать итоговую сумму 10 случайных 
        заказов в 10 магазинах). Отображу эту матрицу:
        """)
    st.code("""
        df = pd.DataFrame(np.random.randn(10, 10), columns=("%d" % i for i in range(10)))
        st.dataframe(df)
        """)
    df = pd.DataFrame(1000 * np.random.rand(10, 10), columns=("Магазин %d" % i for i in range(10)))
    st.dataframe(df)
    st.markdown(
        """
        Интересно, что сработает и такой код:
        """)
    st.code("""
            st.write(df)
            """)
    st.write(df)
    st.markdown(
        """
        И даже такой:
        """)
    st.code("""
            st.write('Информация о стоимости 10 случайных заказов в 10 магазинах города К:', df, 'Сейчас будем исследовать :sunglasses:')
            """)
    st.write('Информация о 10 случайных заказах в 10 магазинах города К:', df, 'Сейчас будем исследовать :sunglasses:')
    st.markdown(
        """
        Таким образом, 'st.write' - еще одна функция streamlit, которая может принимать в качестве аргумента строки, 
        фреймы данных, функции, классы, словари, Plotly фигуры, формулы, записанные Латехом, и многое другое.
        
        Но вернемся обратно к работе с data frame. Интересно узнать наибольший заказ в каждом из магазинов. 
        Подсветим эти значения желтым:
        """)
    st.code("""
        st.write(df.style.highlight_max(axis=0))
           """)
    st.write(df.style.highlight_max(axis=0))
    st.markdown(
        """
        А теперь представим, что я получила ссылку на этот отчет. Мне интересно узнать не только максимальный 
        заказ в каждом магазине, но и, например, отстортировать стоимость заказов в каждом магазине в порядке убывания.
        Для этого я могу скопировать таблицу, загрузить её в excel и сделать еще несколько шагов, а могу **2 раза нажать на
        ячейку "Магазин 1"** и получить отсортированные значения прямо в приложении.
        
        Если же мы не хотим давать пользователям такую возможность, можно отобразить статичную таблицу:
        """)
    st.code("""
            st.table(df)
            """)
    st.table(df)
    st.markdown(
        """
        Иногда бывает такое, что нужно дать пользователю возможность самому отмечать что-то в таблице. Например, в следующей таблице:
        """)
    df_students = pd.DataFrame(
    [
       {"Студент": "Коля Н.", "Средний балл": 4.97},
       {"Студент": "Аня Д.", "Средний балл": 5.00},
       {"Студент": "Петя П.", "Средний балл": 3.72},
    ])
    st.dataframe(df_students)
    st.markdown(
        """
        Хочется добавить отдельный столбец, где можно было бы отмечать, сдал ли ученик последнее дз:
        """)
    st.code("""
            edited_df_students = st.data_editor(df_students)
               """)
    df_students_hw = pd.DataFrame(
        [
            {"Студент": "Коля Н.", "Средний балл": 4.97, "Отметка о сдаче последнего дз": True},
            {"Студент": "Аня Д.", "Средний балл": 5.00, "Отметка о сдаче последнего дз": True},
            {"Студент": "Петя П.", "Средний балл": 3.72, "Отметка о сдаче последнего дз": False},
        ]
    )
    edited_df_students_hw = st.data_editor(df_students_hw)
    st.markdown(
        """
        Здесь можно легко поменять первоначальные отметки и поставить галочку Пете, когда он наконец-то сдаст свое дз (не раньше 23:59).
        
        Также в streamlit есть функция 'st.column_config', которая очень сильно напомнила мне SQL. Например, у нас есть вторая таблица:
        """)
    df_students_bd = pd.DataFrame(
        [
            {"Студент": "Коля Н.", "День рождения": date(2003, 4, 7)},
            {"Студент": "Аня Д.", "День рождения": date(2004, 7, 4)},
            {"Студент": "Петя П.", "День рождения": date(2005, 6, 8)},
        ])
    st.dataframe(df_students_bd)
    st.markdown(
        """
        Можно поработать с колонкой "День рождения" и записать, что "День рождения" - это именно колонка с датой:
        """)
    st.code("""
    st.data_editor(
        df_students_bd,
        column_config={
            "День рождения": st.column_config.DateColumn(
                "День рождения",
                min_value=date(2003, 4, 7),
                max_value=date(2005, 6, 8),
                format="DD.MM.YYYY",
                step=1,
            ),
        },
        hide_index=True,
    )
            """)
    st.data_editor(
        df_students_bd,
        column_config={
            "День рождения": st.column_config.DateColumn(
                "День рождения",
                min_value=date(2003, 4, 7),
                max_value=date(2005, 6, 8),
                format="DD.MM.YYYY",
                step=1,
            ),
        },
        hide_index=True,
    )
    st.markdown(
        """
        И другие функции: 
        
        - st.column_config.TextColumn - показывает, что в столбце записаны именно текстовые значения
        - st.column_config.NumberColumn - показывает, что в столбце записаны именно числа
        - st.column_config.CheckboxColumn - задает Checkbox столбцы, в которых можно ставить галочки (те самые колонки о сдаче домашних заданий)
        - st.column_config.DatetimeColumn - показывает, что в столбце записаны именно дата и время 
        - st.column_config.LinkColumn - показывает, что в столбце записаны именно ссылки на сайты
        - st.column_config.LineChartColumn и st.column_config.BarChartColumn - задают столбцы с линейными и столбчатыми диаграммами 
        - st.column_config.ProgressColumn - показывают значения прогресса в столбцах (например, мы хотели, чтобы каждый блоггер собрал 10 000 для приюта для животных. Данный код покажет, сколько % от максимального числа (в нашем случае - 10 000) составляет переданное значение (в нашем случае - сколько собрал блоггер)) 
        - st.column_config.ListColumn - задают столбцы, в которых будет записано не одно значение, а несколько (например, не средний балл Ани Д, а все её оценки в этом модуле: [5, 5, 5, 5, 5]) 
        """)
    st.markdown(
        """
        Также streamlit позволяет отображать в приложении различные метрики (абсолютно любые, начиная с температуры в 
        Москве этой ночью и заканчивая ценой на нефть марки Brent) и изменения этих метрик. Итак, отображу температуру 
        воздуха, порывы ветра и осадки в жидком эквиваленте в Москве на 28 ноября и их изменения относительно 27 ноября:
        """)
    st.code("""
    col1, col2, col3 = st.columns(3)
    col1.metric("Температура воздуха", "-2 °C", "-4 °C")
    col2.metric("Порывы ветра", "8 м/с", "-1", delta_color="inverse") 
    #delta_color="inverse": значение уменьшилось - стрелочка вниз (= обычно негативное изменение, показываемое красным), но меньшие порывы ветра - это хорошо, поэтому нужно использовать противоположный цвет
    col3.metric("Осадки в жидком эквиваленте", "0,3 мм", "-50%", delta_color="inverse")
    """)
    col1, col2, col3 = st.columns(3)
    col1.metric("Температура воздуха", "-2 °C", "-4 °C")
    col2.metric("Порывы ветра", "8 м/с", "-1", delta_color="inverse")
    col3.metric("Осадки в жидком эквиваленте", "0,3 мм", "-50%", delta_color="inverse")

def charts():
    st.markdown(
        """
        ### Что библиотека умеет, Part 3 - работа с графиками:

        - В данном разделе я бы хотела показать, какие возможности для работы с графиками представляет streamlit
        
        Естественно, такая продвинутая библиотека умеет рисовать все самые базовые графики: 
    """)
    st.code("""
        st.area_chart(chart_data) #рисуем диаграммы с областями 
        st.bar_chart(chart_data) #рисуем столбчатые диаграммы
        st.line_chart(chart_data) #рисуем линейные диаграммы
        st.scatter_chart(chart_data) #рисуем точечные диаграммы 
        st.map(df) #рисуем точки на карте (ну держись dataset по маркетплейсам Бразилии!)
    """)
    st.markdown(
        """
        И, для иллюстрации, нарисую линейную диаграмму тех 10 случайных заказов 10 магазинов города К:
    """)
    df = pd.DataFrame(1000 * np.random.rand(10, 10), columns=("Магазин %d" % i for i in range(10)))
    st.line_chart(df)
    st.markdown("""
        Как можно заметить, при наведении курсора на конкретные точки, мы получаем номер случайного заказа, сумму покупок 
        в этом заказе и магазин, из которого был взят данный чек.
        
        Кроме того, если описанного функционала мало, streamlit совместим с такими библиотеками как Matplotlib и Plotly. 
        
        Нарисуем график 200 случайных чисел, сгенерированных из нормального распределения, используя Matplotlib:
    """)
    st.code("""
    arr = np.random.normal(1, 1, size=200)
    fig, ax = plt.subplots()
    ax.hist(arr, bins=50)
    st.pyplot(fig)
    """)
    arr = np.random.normal(1, 1, size=200)
    fig, ax = plt.subplots()
    ax.hist(arr, bins=50)
    st.pyplot(fig)
    st.markdown("""
        А теперь нарисуем тепловую диаграмму стоимости наших случайных заказов, используя streamlit и Plotly:
    """)
    st.code("""
    st.subheader("Продолжаем изучать покупки в 10 магазинах города К:") #создаем заголовок
    fig = px.imshow(
        df.values,
        labels=dict(x="Магазин", y="Чек"),
        x=df.columns,
        y=df.index,
        color_continuous_scale="reds",
    )
    st.plotly_chart(fig, theme="streamlit", use_container_width=True)
        """)
    df.index = ["Чек %d" % i for i in range(10)]
    st.subheader("Продолжаем изучать покупки в 10 магазинах города К:") #создаем заголовок
    fig = px.imshow(
        df.values,
        labels=dict(x="Магазин", y="Чек"),
        x=df.columns,
        y=df.index,
        color_continuous_scale="reds",
    )
    st.plotly_chart(fig, theme="streamlit", use_container_width=True)
    st.markdown("""
        Также в streamlit можно рисовать roadmap:
        """)
    st.code("""
    st.subheader('Как понять, что перед вами кошка?')

    graph = graphviz.Digraph()
    graph.edge('Мяукает?', 'Кошка!')
    st.graphviz_chart(graph)
            """)
    st.subheader('Как понять, что перед вами кошка?')

    graph = graphviz.Digraph()
    graph.edge('Мяукает?', 'Кошка!')
    st.graphviz_chart(graph)


def other_feat():
    st.markdown(
        """
        ### Что библиотека умеет, Part 4 - разные интересные функции:

        - В данном разделе я покажу, что еще умеет streamlit (а умеет он многое!)

        Например, можно создать кнопку:
    """)
    st.code("""
    if st.button("Я люблю котиков", type="primary"):
        st.write('Я тоже!')
    if st.button('Нет, я люблю собачек'):
        st.write('Да, они тоже милашки!')
    """)
    if st.button("Я люблю котиков", type="primary"):
        st.write('Я тоже!')
    if st.button('Нет, я люблю собачек'):
        st.write('Да, они тоже милашки!')

    st.markdown(
        """
        И даже сделать так, чтобы эта кнопка вела на какую-то страницу:
        """)
    st.code("""
    st.link_button("Перейти по ссылке", "Некоторая секретная ссылка")
                    """)
    st.link_button("Перейти по ссылке", "https://www.youtube.com/watch?v=dQw4w9WgXcQ")
    st.markdown(
        """
        Можно добавить поле с галочкой:
        """)
    st.code("""
    checkbox = st.checkbox('У меня всё получится') #Или скучное "Я прочитал(а) и принимаю пользовательское сообщение"
    if agree:
        st.write('Всё получилось!') #или перенаправлять на какую-то другую страницу 
                        """)
    checkbox = st.checkbox('У меня всё получится')
    if checkbox:
        st.write('Всё получилось!')

    st.markdown(
        """
        Или слайдер:
        """)
    st.code("""
       checkbox = st.checkbox('У меня всё получится') #Или скучное "Я прочитал(а) и принимаю пользовательское сообщение"
       if agree:
           st.write('Всё получилось!') #или перенаправлять на какую-то другую страницу 
                           """)
    mark = st.slider('Оценка за этот доклад?', 8, 10, 10)
    st.write("Мама, у меня", mark, 'за доклад')

    st.markdown(
        """
        Можно позволить пользователю не только проставлять статус сдачи дз студентами, но и редактировать их ФИО, оценки и даже добавлять новые строки:
    """)
    st.code("""
    edited_df_students_hw = st.data_editor(df_students_hw, num_rows="dynamic") #num_rows="dynamic" позволяет пользователю добавлять новые строки
                    """)
    df_students_hw = pd.DataFrame(
        [
            {"Студент": "Коля Н.", "Средний балл": 4.97, "Отметка о сдаче последнего дз": True},
            {"Студент": "Аня Д.", "Средний балл": 5.00, "Отметка о сдаче последнего дз": True},
            {"Студент": "Петя П.", "Средний балл": 3.72, "Отметка о сдаче последнего дз": False},
        ]
    )
    edited_df_students_hw = st.data_editor(df_students_hw, num_rows="dynamic")

    st.markdown(
        """
        И немного других интересных функций:
        
        - st.download_button - добавляет кнопку загрузки файлов
        - st.selectbox - добавляет поле, в котором можно выбрать 1 вариант из n (например, "Как нам с вами связаться?" 
        
        1. По телефону (st.number_input - добавляем поле для ввода цифр)
        
        2. По email (st.text_input - добавляем строчку для ввода текста)
        
        3. Другой вариант (st.text_area - добавляем большое поле для ввода текста)
    """)

    st.markdown(
        """
       Также streamlit позволяет добавить в приложение картинки, аудио и видео (причем можно загрузить как через файл, так и через ссылку):
    """)
    st.code("""
    st.image("https://cs14.pikabu.ru/post_img/2021/08/20/11/og_og_162948548821740854.jpg")
    """)
    st.image("https://cs14.pikabu.ru/post_img/2021/08/20/11/og_og_162948548821740854.jpg")

    st.markdown(
        """
       Другая интересная фича - sidebar (этот выбор части доклада слева), я реализовала его следующим образом:
    """)
    st.code("""
        page = st.sidebar.selectbox("Выберите раздел доклада", ["Введение", "Работаем с текстом", "Работаем с таблицами", "Рисуем графики", "Разные фичи", "Вывод"])
        if page == "Введение":
            general_information() #некоторая функция general_information()
        elif page == "Работаем с текстом":
            text()
        """)
    st.markdown(
        """
    Также в streamlit есть несколько иконок, отображающих загрузку и прогресс, например:
    """)
    st.code("""
    with st.spinner('Пожалуйста, подождите...'):
        time.sleep(5)
    st.success('Прошло 5 секунд!')
                """)
    with st.spinner('Пожалуйста, подождите...'):
        time.sleep(5)
    st.success('Прошло 5 секунд!')

def dia():
    st.markdown(
    """
    ### Также в steamlit можно реализовать поле для ввода реплики диалога
       
    Этот функционал выглядит бесполезным, но есть примеры приложений, в которые интегрировали ИИ, поэтому диалог уже 
    выглядит намного интереснее. Например: https://llama2.streamlit.app/
    """)
    st.code("""
        prompt = st.chat_input("Напишите что-то !с маленькой буквы!")
        if prompt:
            st.write(f"Если сказать {prompt} в пещере, где есть эхо, то можно услышать {prompt} в ответ")
                """)
    prompt = st.chat_input("Напишите что-то !с маленькой буквы!")
    if prompt:
        st.write(f"Если сказать {prompt} в пещере, где есть эхо, то можно услышать {prompt} в ответ")

def conclusion():
    st.markdown(
        """
        # Основные выводы

        Таким образом, работа со случайно выбранной по описанию библиотекой оказалось очень интересной и необычной. 
        Streamlit - это не просто еще одна библиотека для красивых графиков. Кажется, что её функционал намного больше 
        и интереснее, начиная с более удобного представления учебных докладов и заканчивая внедрением ИИ в диалоговые окна streamlit. 
       
        В заключение поделюсь тремя неожиданными выводами, до которых я дошла в процессе работы над этим докладом:
        
        1. Это действительно несложная библиотека, которую мне удалось достаточно быстро изучить (начиная с pip install 
        streamlit и заканчивая публикацией этого приложения по следующей инструкции: https://blog.streamlit.io/host-your-streamlit-app-for-free/)
        
        2. Существует целое комьюнити людей, которые исследуют streamlit и добавляют какие-то интересные функции к уже 
        существующим (например, код, который возвращает координаты изображения, если на него кликнуть: https://github.com/blackary/streamlit-image-coordinates)
        
        3. Документация Streamlit очень простая, понятная и включает даже некоторые интересные туториалы (например, по созданию клона Chat GPT)
    """)
    


page = st.sidebar.selectbox("Выберите раздел доклада", ["Введение", "Работаем с текстом", "Работаем с таблицами", "Рисуем графики", "Разные фичи", "Реализация диалога в streamlit", "Вывод"])

if page == "Введение":
    general_information()
elif page == "Работаем с текстом":
    text()
elif page == "Работаем с таблицами":
    work_w_df()
elif page == "Рисуем графики":
    charts()
elif page == "Разные фичи":
    other_feat()
elif page == "Реализация диалога в streamlit":
    dia()
elif page == "Вывод":
    conclusion()

